@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using PadelMatchBlazor.Models
@using PadelMatchBlazor.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<div class="container">
    <div class="row justify-content-center mt-5">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Connexion</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@loginRequest" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                @errorMessage
                            </div>
                        }

                        <div class="form-group mb-3">
                            <label for="username">Nom d'utilisateur</label>
                            <InputText id="username" @bind-Value="loginRequest.Username" class="form-control" />
                            <ValidationMessage For="@(() => loginRequest.Username)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="password">Mot de passe</label>
                            <InputText id="password" type="password" @bind-Value="loginRequest.Password" class="form-control" />
                            <ValidationMessage For="@(() => loginRequest.Password)" />
                        </div>

                        <div class="form-group d-flex justify-content-between">
                            <div class="form-check">
                                <InputCheckbox id="rememberMe" @bind-Value="rememberMe" class="form-check-input" />
                                <label class="form-check-label" for="rememberMe">Se souvenir de moi</label>
                            </div>
                            <a href="/forgot-password">Mot de passe oublié?</a>
                        </div>

                        <div class="mt-4">
                            <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> Connexion en cours...</span>
                                }
                                else
                                {
                                    <span>Se connecter</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer text-center">
                    <p class="mb-0">Vous n'avez pas de compte? <a href="/register">S'inscrire</a></p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginRequest loginRequest = new LoginRequest();
    private bool rememberMe = false;
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    // protected override void OnInitialized()
    // {
    //     // Vérifier si l'utilisateur est déjà connecté
    //     // Si oui, rediriger vers la page d'accueil
    // }
    protected override async Task OnInitializedAsync()
    {
        // Vérifier si l'utilisateur est déjà connecté
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            // L'utilisateur est déjà connecté, rediriger vers la page d'accueil
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var result = await AuthService.Login(loginRequest);
            if (result)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "Identifiants incorrects. Veuillez réessayer.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors de la connexion: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}