@page "/edit-availability/{Id:int?}"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using PadelMatchBlazor.Models.Requests
@using PadelMatchBlazor.Models.Responses
@using PadelMatchBlazor.Services
@inject UserAvailabilityService UserAvailabilityService
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <h2 class="mb-3">@(Id.HasValue ? "Modifier" : "Ajouter") une disponibilité</h2>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    else
    {
        <EditForm Model="@availabilityRequest" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label for="dayOfWeek" class="form-label">Jour de la semaine</label>
                <select id="dayOfWeek" class="form-select" @bind="availabilityRequest.DayOfWeek">
                    @foreach (DayOfWeek day in Enum.GetValues(typeof(DayOfWeek)))
                    {
                        <option value="@day">@GetDayName(day)</option>
                    }
                </select>
            </div>

            <div class="mb-3">
                <label for="startTime" class="form-label">Heure de début</label>
                <select id="startTime" class="form-select" @bind="selectedStartHour">
                    @foreach (var hour in availableHours)
                    {
                        <option value="@hour">@hour:00</option>
                    }
                </select>
            </div>

            <div class="mb-3">
                <label for="endTime" class="form-label">Heure de fin</label>
                <select id="endTime" class="form-select" @bind="selectedEndHour">
                    @foreach (var hour in availableHours)
                    {
                        <option value="@hour">@hour:00</option>
                    }
                </select>
            </div>

            <div class="mb-3 form-check">
                <input type="checkbox" class="form-check-input" id="isRecurring"
                       @bind="availabilityRequest.IsRecurring" />
                <label class="form-check-label" for="isRecurring">Disponibilité récurrente</label>
            </div>

            <div class="d-flex justify-content-between">
                <button type="button" class="btn btn-secondary" @onclick="GoBack">Annuler</button>
                <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Traitement...</span>
                    }
                    else
                    {
                        <span>@(Id.HasValue ? "Mettre à jour" : "Ajouter")</span>
                    }
                </button>
            </div>
        </EditForm>
    }
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    private AvailabilityRequest availabilityRequest = new AvailabilityRequest
        {
            IsRecurring = false // Valeur par défaut
        };

    private bool isLoading = true;
    private bool isSubmitting = false;
    private string errorMessage;
    private List<AvailabilityResponse> availabilities;

    // Liste des heures disponibles (8h à 22h)
    private List<int> availableHours = Enumerable.Range(8, 15).ToList();

    // Valeurs sélectionnées dans les listes déroulantes
    private int selectedStartHour = 8;
    private int selectedEndHour = 9;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            // Charger toutes les disponibilités
            availabilities = await UserAvailabilityService.GetUserAvailabilitiesAsync();

            if (Id.HasValue)
            {
                // Charger la disponibilité existante
                var availability = availabilities.FirstOrDefault(a => a.Id == Id.Value);

                if (availability == null)
                {
                    errorMessage = "Disponibilité introuvable";
                    return;
                }

                availabilityRequest.DayOfWeek = (DayOfWeek)availability.DayOfWeek;
                availabilityRequest.IsRecurring = availability.IsRecurring;

                // Récupérer les heures des TimeSpan
                if (availability.StartTime.HasValue)
                {
                    selectedStartHour = availability.StartTime.Value.Hours;
                }

                if (availability.EndTime.HasValue)
                {
                    selectedEndHour = availability.EndTime.Value.Hours;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors du chargement: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            isSubmitting = true;

            // Vérifier que l'heure de fin est après l'heure de début
            if (selectedEndHour <= selectedStartHour)
            {
                errorMessage = "L'heure de fin doit être après l'heure de début";
                isSubmitting = false;
                return;
            }

            // Convertir les heures en TimeSpan
            availabilityRequest.StartTime = new TimeSpan(selectedStartHour, 0, 0);
            availabilityRequest.EndTime = new TimeSpan(selectedEndHour, 0, 0);

            if (Id.HasValue)
            {
                // Mise à jour d'une disponibilité existante
                await UserAvailabilityService.UpdateUserAvailabilityAsync(Id.Value, availabilityRequest);
            }

            else
            {
                // Création d'une nouvelle disponibilité
                await UserAvailabilityService.CreateUserAvailabilityAsync(availabilityRequest);
            }
            NavigationManager.NavigateTo("/user-availability?saved=true");
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/user-availability");
    }

    private string GetDayName(DayOfWeek day)
    {
        return day switch
        {
            DayOfWeek.Monday => "Lundi",
            DayOfWeek.Tuesday => "Mardi",
            DayOfWeek.Wednesday => "Mercredi",
            DayOfWeek.Thursday => "Jeudi",
            DayOfWeek.Friday => "Vendredi",
            DayOfWeek.Saturday => "Samedi",
            DayOfWeek.Sunday => "Dimanche",
            _ => day.ToString()
        };
    }
}