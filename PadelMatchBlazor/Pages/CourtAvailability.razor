@page "/courts/availability"
@attribute [Authorize]
@using Domain.Enums
@using Microsoft.AspNetCore.Authorization
@using PadelMatchBlazor.Models.Responses
@using PadelMatchBlazor.Services
@using System.Globalization
@inject HttpClient Http
@inject PadelMatchBlazor.Services.CourtService CourtService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <h2 class="mb-4 d-flex align-items-center">
        <i class="bi bi-calendar2-week me-2"></i>
        Disponibilité des terrains
    </h2>

    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">
                <i class="bi bi-search me-2"></i>
                Rechercher un terrain
            </h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4 mb-3">
                    <label><i class="bi bi-calendar-date me-1"></i> Date</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-calendar"></i></span>
                        <input type="date" @bind="searchDate" class="form-control" min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                    </div>
                </div>
                <div class="col-md-4 mb-3">
                    <label><i class="bi bi-filter me-1"></i> Type de terrain</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-house"></i></span>
                        <select class="form-select" @bind="selectedCourtType">
                            <option value="">Tous</option>
                            <option value="indoor">Intérieur</option>
                            <option value="outdoor">Extérieur</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-4 mb-3">
                    <label><i class="bi bi-clock me-1"></i> Tranche horaire</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-clock"></i></span>
                        <select class="form-select" @bind="selectedTimeRange">
                            <option value="all">Toute la journée</option>
                            <option value="morning">Matin (8h-12h)</option>
                            <option value="afternoon">Après-midi (12h-18h)</option>
                            <option value="evening">Soirée (18h-22h)</option>
                        </select>
                    </div>
                </div>
            </div>

            <div class="d-flex justify-content-end">
                <button class="btn btn-outline-secondary me-2" @onclick="ResetFilters">
                    <i class="bi bi-x-circle me-1"></i> Réinitialiser
                </button>
                <button class="btn btn-primary" @onclick="SearchAvailability">
                    <i class="bi bi-search me-1"></i> Rechercher
                </button>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
            <p class="mt-2 text-muted">Chargement des disponibilités...</p>
        </div>
    }
    else if (error != null)
    {
        <div class="alert alert-danger d-flex align-items-center" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            <div>@error</div>
        </div>
    }
    else if (availabilityData != null && availabilityData.Count > 0)
    {
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="bi bi-calendar-check me-2"></i>
                    Disponibilités pour le @searchDate.ToString("dddd d MMMM yyyy", new CultureInfo("fr-FR"))
                </h5>
                <div>
                    <button class="btn btn-sm btn-light" @onclick="NavigateToPreviousDay" title="Jour précédent">
                        <i class="bi bi-chevron-left"></i>
                    </button>
                    <button class="btn btn-sm btn-light ms-1" @onclick="NavigateToNextDay" title="Jour suivant">
                        <i class="bi bi-chevron-right"></i>
                    </button>
                </div>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th class="text-center" style="width: 100px;">Heure</th>
                                @foreach (var court in GetFilteredCourts())
                                {
                                    <th class="text-center">
                                        <div class="d-flex justify-content-center align-items-center">
                                            <span class="me-1">@court.CourtName</span>
                                            @if (court.CourtId % 2 == 0)
                                            {
                                                <span class="badge bg-info text-dark" title="Terrain intérieur">
                                                    <i class="bi bi-house"></i>
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-success text-white" title="Terrain extérieur">
                                                    <i class="bi bi-tree"></i>
                                                </span>
                                            }
                                        </div>
                                    </th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var timeSlot in GetFilteredTimeSlots())
                            {
                                <tr>
                                    <td class="text-center align-middle fw-bold bg-light">
                                        @* @timeSlot.ToString(@"HH\:mm") - @timeSlot.Add(TimeSpan.FromHours(1)).ToString(@"HH\:mm") *@
                                        @FormatTimeSlot(timeSlot) - @FormatTimeSlot(timeSlot.Add(TimeSpan.FromHours(1)))
                                    </td>
                                    @foreach (var court in GetFilteredCourts())
                                    {
                                        var slotStatus = GetCourtSlotStatus(court.CourtId, timeSlot);
                                        bool isAvailable = slotStatus == TimeSlotStatus.Available;
                                        string cellClass = GetCellClass(isAvailable);
                                        string cellTitle = isAvailable ? $"Disponible - Cliquez pour réserver" : "Ce créneau est déjà réservé";

                                        <td class="text-center align-middle @cellClass"
                                            style="cursor: pointer; transition: all 0.2s ease;"
                                            @onclick="() => HandleCellClick(court.CourtId, timeSlot, isAvailable)"
                                            title="@cellTitle">

                                            @if (isAvailable)
                                            {
                                                <div>
                                                    <span class="badge bg-success mb-2">
                                                        <i class="bi bi-check-circle me-1"></i> Disponible
                                                    </span>
                                                    <button class="btn btn-sm btn-outline-primary d-block mx-auto mt-1 reserve-btn">
                                                        <i class="bi bi-calendar-plus me-1"></i> Réserver
                                                    </button>
                                                </div>
                                            }
                                            else
                                            {
                                                <div>
                                                    <span class="badge bg-danger">
                                                        <i class="bi bi-x-circle me-1"></i> Réservé
                                                    </span>
                                                </div>
                                            }
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="card-footer bg-light">
                <div class="d-flex gap-3 justify-content-center">
                    <div class="d-flex align-items-center">
                        <div class="legend-color bg-success-subtle me-2" style="width: 20px; height: 20px; border-radius: 4px;"></div>
                        <span>Disponible</span>
                    </div>
                    <div class="d-flex align-items-center">
                        <div class="legend-color bg-danger-subtle me-2" style="width: 20px; height: 20px; border-radius: 4px;"></div>
                        <span>Réservé</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="d-flex justify-content-end mt-4">
            <button class="btn btn-outline-primary me-2" @onclick="() => ExportAvailability()">
                <i class="bi bi-download me-1"></i> Exporter
            </button>
            <button class="btn btn-success" @onclick="() => NavigateToCreateReservation()">
                <i class="bi bi-plus-circle me-1"></i> Nouvelle réservation
            </button>
        </div>
    }
    else if (availabilityData != null)
    {
        <div class="alert alert-info d-flex align-items-center" role="alert">
            <i class="bi bi-info-circle-fill me-2"></i>
            <div>Aucun terrain disponible pour cette date.</div>
        </div>
    }
</div>

@code {

    private TimeSpan _minStartTime = DateTime.Now.TimeOfDay;
    private DateTime searchDate = DateTime.Today;
    private List<TimeSpan> timeSlots = new List<TimeSpan>();
    private List<CourtAvailabilityResponse> availabilityData;
    private bool isLoading = false;
    private string error;
    private string selectedCourtType = "";
    private string selectedTimeRange = "all";

    protected override async Task OnInitializedAsync()
    {
        GenerateTimeSlots();
        await SearchAvailability();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                document.querySelectorAll('.reserve-btn').forEach(btn => {
                    btn.addEventListener('mouseover', () => {
                        btn.classList.remove('btn-outline-primary');
                        btn.classList.add('btn-primary');
                    });
                    btn.addEventListener('mouseout', () => {
                        btn.classList.remove('btn-primary');
                        btn.classList.add('btn-outline-primary');
                    });
                });
            ");
        }
    }

    private void GenerateTimeSlots()
    {
        // Générer les créneaux horaires (par exemple, de 8h à 22h par incréments d'une heure)
        var openingTime = new TimeSpan(8, 0, 0);
        var closingTime = new TimeSpan(22, 0, 0);
        var slotDuration = TimeSpan.FromHours(1);

        timeSlots.Clear();
        for (var time = openingTime; time < closingTime; time = time.Add(slotDuration))
        {
            timeSlots.Add(time);
        }
    }

    private async Task SearchAvailability()
    {
        isLoading = true;
        error = null;
        Console.WriteLine($"Recherche des disponibilités pour le {searchDate}");

        try
        {
            availabilityData = await CourtService.GetCourtsAvailabilityAsync(searchDate);
            Console.WriteLine($"Réponse de l'API reçue: {availabilityData?.Count ?? 0} terrains trouvés");

            if (availabilityData == null || !availabilityData.Any())
            {
                Console.WriteLine("Génération de données fictives car la liste est vide");
                availabilityData = GenerateSampleAvailability();
            }
        }
        catch (Exception ex)
        {
            error = $"Erreur lors de la recherche des disponibilités : {ex.Message}";
            Console.WriteLine(error);
            Console.WriteLine("Génération de données fictives suite à une erreur");
            availabilityData = GenerateSampleAvailability();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ResetFilters()
    {
        selectedCourtType = "";
        selectedTimeRange = "all";
        searchDate = DateTime.Today;
        StateHasChanged();
    }

    private void NavigateToPreviousDay()
    {
        if (searchDate > DateTime.Today)
        {
            searchDate = searchDate.AddDays(-1);
            SearchAvailability();
        }      
    
    }

    private void NavigateToNextDay()
    {
        searchDate = searchDate.AddDays(1);
        SearchAvailability();
    }

    private List<CourtAvailabilityResponse> GetFilteredCourts()
    {
        if (availabilityData == null)
            return new List<CourtAvailabilityResponse>();

        // Si aucun filtre, retourner tous les terrains
        if (string.IsNullOrEmpty(selectedCourtType))
            return availabilityData;

        // Sinon, filtrer par type (intérieur/extérieur)
        // Note: on utilise un modèle simpliste où les terrains avec ID pair sont intérieurs
        // et les terrains avec ID impair sont extérieurs
        bool isIndoor = selectedCourtType == "indoor";

        return availabilityData
            .Where(c => isIndoor ? c.CourtId % 2 == 0 : c.CourtId % 2 != 0)
            .ToList();
    }

    // private List<TimeSpan> GetFilteredTimeSlots()
    // {
    //     var filteredSlots = new List<TimeSpan>();

    //     // Si les données sont disponibles, extraire les TimeSpan des DateTime
    //     if (availabilityData != null && availabilityData.Any() &&
    //         availabilityData[0].AvailableTimeSlots.Any())
    //     {
    //         // Extraire les heures uniques des créneaux retournés par l'API
    //         var uniqueHours = availabilityData
    //             .SelectMany(c => c.AvailableTimeSlots)
    //             .Select(s => s.StartTime.TimeOfDay)
    //             .Distinct()
    //             .OrderBy(t => t)
    //             .ToList();

    //         filteredSlots = uniqueHours;
    //     }
    //     else
    //     {
    //         // Utiliser la génération standard si pas de données
    //         switch (selectedTimeRange)
    //         {
    //             case "morning":
    //                 filteredSlots = timeSlots.Where(t => t.Hours >= 8 && t.Hours < 12).ToList();
    //                 break;
    //             case "afternoon":
    //                 filteredSlots = timeSlots.Where(t => t.Hours >= 12 && t.Hours < 18).ToList();
    //                 break;
    //             case "evening":
    //                 filteredSlots = timeSlots.Where(t => t.Hours >= 18 && t.Hours < 22).ToList();
    //                 break;
    //             case "all":
    //             default:
    //                 filteredSlots = timeSlots;
    //                 break;
    //         }
    //     }

    //     return filteredSlots;
    // }

    private List<TimeSpan> GetFilteredTimeSlots()
    {
        var allSlots = new List<TimeSpan>();

        // Si les données sont disponibles, extraire les TimeSpan des DateTime
        if (availabilityData != null && availabilityData.Any() &&
            availabilityData[0].AvailableTimeSlots.Any())
        {
            // Extraire les heures uniques des créneaux retournés par l'API
            allSlots = availabilityData
                .SelectMany(c => c.AvailableTimeSlots)
                .Select(s => s.StartTime.TimeOfDay)
                .Distinct()
                .OrderBy(t => t)
                .ToList();
        }
        else
        {
            // Utiliser la génération standard si pas de données
            allSlots = timeSlots;
        }

        // Filtrage selon la date
        if (searchDate.Date == DateTime.Today)
        {
            allSlots = allSlots.Where(t => t > DateTime.Now.TimeOfDay).ToList();
        }
        // Appliquer le filtre de tranche horaire
        switch (selectedTimeRange)
        {
            case "morning":
                return allSlots.Where(t => t.Hours >= 8 && t.Hours < 12).ToList();
            case "afternoon":
                return allSlots.Where(t => t.Hours >= 12 && t.Hours < 18).ToList();
            case "evening":
                return allSlots.Where(t => t.Hours >= 18 && t.Hours < 22).ToList();
            case "all":
            default:
                return allSlots;
        }
    }

    private string FormatTimeSlot(TimeSpan time)
    {
        try
        {
            return time.ToString(@"hh\:mm");
        }
        catch
        {
            // En cas d'erreur, format simple
            return $"{time.Hours:D2}:{time.Minutes:D2}";
        }
    }

    

    private TimeSlotStatus GetCourtSlotStatus(int courtId, TimeSpan timeSlot)
    {
        // Si c'est la date d'aujourd'hui, on applique les restrictions d'horaire
        if (searchDate.Date == DateTime.Today)
        {
            // Si le créneau est avant l'heure actuelle, on le déclare indisponible
            if (timeSlot < DateTime.Now.TimeOfDay)
            {
                return TimeSlotStatus.Unavailable;
            }
        }

        if (availabilityData == null)
            return TimeSlotStatus.Unavailable;

        var courtAvailability = availabilityData.FirstOrDefault(a => a.CourtId == courtId);
        if (courtAvailability == null)
            return TimeSlotStatus.Unavailable;

        var slot = courtAvailability.AvailableTimeSlots.FirstOrDefault(s =>
            s.StartTime.TimeOfDay.Hours == timeSlot.Hours &&
            s.StartTime.TimeOfDay.Minutes == timeSlot.Minutes);

        return slot?.Status ?? TimeSlotStatus.Unavailable;
    }

    private string GetCellClass(bool isAvailable)
    {
        return isAvailable
            ? "bg-success-subtle slot-available"
            : "bg-danger-subtle text-decoration-line-through slot-reserved";
    }

    private void HandleCellClick(int courtId, TimeSpan timeSlot, bool isAvailable)
    {
        if (isAvailable)
        {
            var date = searchDate.Add(timeSlot);
            NavigationManager.NavigateTo($"/reservations/create?courtId={courtId}&date={date:yyyy-MM-ddTHH:mm:ss}");
        }
        else
        {
            // Peut-être afficher un message que le créneau est déjà réservé
            JSRuntime.InvokeVoidAsync("alert", $"Le terrain {courtId} est déjà réservé à {timeSlot}");
        }
    }

    private void NavigateToCreateReservation()
    {
        NavigationManager.NavigateTo("/reservations/create");
    }

    private async Task ExportAvailability()
    {
        try
        {
            // Formatage simplifié des données pour l'export (pourrait être amélioré)
            var csvContent = "Terrain,Heure,Statut\n";

            foreach (var court in GetFilteredCourts())
            {
                foreach (var timeSlot in GetFilteredTimeSlots())
                {
                    var status = GetCourtSlotStatus(court.CourtId, timeSlot);
                    var statusText = status == TimeSlotStatus.Available ? "Disponible" : "Réservé";

                    csvContent += $"{court.CourtName},{timeSlot:hh\\:mm} - {timeSlot.Add(TimeSpan.FromHours(1)):hh\\:mm},{statusText}\n";
                }
            }

            // Utiliser JS pour télécharger le fichier CSV
            var fileName = $"disponibilites-terrains-{searchDate:yyyy-MM-dd}.csv";
            var fileContent = "data:text/csv;charset=utf-8," + Uri.EscapeDataString(csvContent);

            await JSRuntime.InvokeVoidAsync("eval", $@"
                var link = document.createElement('a');
                link.setAttribute('href', '{fileContent}');
                link.setAttribute('download', '{fileName}');
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            ");
        }
        catch (Exception ex)
        {
            error = $"Erreur lors de l'exportation : {ex.Message}";
        }
    }

    private List<CourtAvailabilityResponse> GenerateSampleAvailability()
    {
        var random = new Random();
        var result = new List<CourtAvailabilityResponse>();

        for (int i = 1; i <= 4; i++)
        {
            var availableSlots = new List<ReservationSlotResponse>();

            foreach (var timeSlot in timeSlots)
            {
                // Générer aléatoirement si le créneau est disponible (70% de chance)
                bool isAvailable = random.Next(100) < 70;

                availableSlots.Add(new ReservationSlotResponse
                    {
                        StartTime = searchDate.Add(timeSlot),
                        EndTime = searchDate.Add(timeSlot).AddHours(1),
                        Status = isAvailable ? TimeSlotStatus.Available : TimeSlotStatus.Booked
                    });
            }

            result.Add(new CourtAvailabilityResponse
                {
                    CourtId = i,
                    CourtName = $"Terrain {i}",
                    AvailableTimeSlots = availableSlots
                });
        }

        return result;
    }
}